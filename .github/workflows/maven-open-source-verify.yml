name: maven-open-source-verify
on:
  workflow_call:
    inputs:
      java-version:
        description: "Java Runtime Version"
        required: false
        type: string
        default: 21
      commands:
        description: "Maven command"
        required: false
        type: string
        default: "-B clean verify --update-snapshots"
      runs-on:
        description: "Runner"
        required: false
        type: string
        default: "ubuntu-24.04"
      java-distribution:
        description: "Java distribution for setup-java"
        required: false
        type: string
        default: "liberica"

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Java ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.java-distribution }}
      - name: Cache Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Verify
        run: |
          mvn ${{ inputs.commands }}
      - name: Print error reports
        if: failure()
        run: |
          readarray -d '' reports < <(find . -wholename "*/target/surefire-reports/*.txt" -print0)
          if [ ${#reports[@]} -eq 0 ]; then
            echo "No surefire reports found"
          else
            errorOrFailureReports=()
            for report in "${reports[@]}"; do
              if ! grep -q 'Failures: 0, Errors: 0' $report; then
                errorOrFailureReports+=($report)
              fi
            done
            errorOrFailureReportCount=${#errorOrFailureReports[@]}
            if [ "$errorOrFailureReportCount" -gt "10" ]; then
              echo ":rotating_light: Printing 10 of $errorOrFailureReportCount unit test files with failure(s) and/or error(s)." >> $GITHUB_STEP_SUMMARY
              for i in {0..count}
              do
                cat "${errorOrFailureReports[$i]}" >> $GITHUB_STEP_SUMMARY
              done
            else 
              echo ":rotating_light: Found $errorOrFailureReportCount unit test files with failure(s) and/or error(s)." >> $GITHUB_STEP_SUMMARY
              for report in "${errorOrFailureReports[@]}"; do
                cat "$report" >> $GITHUB_STEP_SUMMARY
              done
            fi
          fi
