name: Release to Maven Central
description: "Publish release artifact to Maven Central for a Maven library project. Increments the version based on the latest release tag. The workflow activates a 'release' profile upon running deploy."
on:
  workflow_call:
    inputs:
      java-version:
        description: "Java Runtime Version"
        required: false
        type: string
        default: 21
      release-prefix:
        description: "Prefix for release tag"
        required: false
        type: string
        default: "release-"
      server-id:
        description: "server id used in pom to reference generated settings.xml"
        type: string
        required: false
        default: ossrh
      skip-tests:
        description: "Skip test"
        required: false
        type: boolean
        default: false
      commands:
        description: "Maven command parameters"
        required: false
        type: string
        default: "-B clean deploy"
      runs-on:
        description: "Runner"
        required: false
        type: string
        default: "ubuntu-24.04"
      java-distribution:
        description: "Java distribution for setup-java"
        required: false
        type: string
        default: "liberica"
    secrets:
      SONATYPE_AUTH_USER:
        required: true
      SONATYPE_AUTH_TOKEN:
        required: true
      SONATYPE_GPG_KEY:
        required: true
      SONATYPE_GPG_KEY_NAME:
        required: true
      SONATYPE_GPG_KEY_PASSWORD:
        required: true
    outputs:
      version:
        description: Release version
        value: ${{ jobs.release.outputs.version }}
      tag:
        description: Release tag
        value: ${{ jobs.release.outputs.tag }}

jobs:
  release:
    outputs:
      version: ${{ steps.publish.outputs.version }}
      tag: ${{ steps.publish.outputs.tag }}
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
      - name: Set up Java ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.java-distribution }}
          server-id: ${{ inputs.server-id }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Cache Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Publish
        id: publish
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_AUTH_USER }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_AUTH_TOKEN }}
          SONATYPE_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
          SONATYPE_GPG_KEY_PASSWORD: ${{ secrets.SONATYPE_GPG_KEY_PASSWORD }}
          REL_PREFIX: ${{ inputs.release-prefix }}
        run: |
          echo "Preparing release to Maven Central"
          PREVIOUS_TAG=$(git tag -l --sort -version:refname "${{ inputs.release-prefix }}*" | head -n 1)
          if [ "$PREVIOUS_TAG" = "" ]; then
            echo "Expected a preexisting tag on the form '${{ inputs.release-prefix }}x.y.z' for automatic version increment"
            exit 1
          fi
          echo "Previous release tag is: $PREVIOUS_TAG"
          
          REL_LEN=$(echo ${{ inputs.release-prefix }} | wc -c | xargs)
          PREVIOUS_VERSION=$(echo $PREVIOUS_TAG | cut -c ${REL_LEN}-)

          echo "Previous release version is: $PREVIOUS_VERSION"

          COMMIT_MESSAGE=$(git log --format="%B" -n 1)
          # default version increment is patch
          VERSION_INCREMENT="patch"
          
          # check whether commit message contains bracket
          if [[ $COMMIT_MESSAGE =~ \[ ]]; then
            # extract bracket contents (supports multiple brackets)
            BRACKET_PAYLOADS=$(echo "$COMMIT_MESSAGE" | grep -Po "(?<=\[)[^\]]*(?=\])")
          
            # iterate over bracket payloads
            while IFS= read -r BRACKET_PAYLOAD; do
              # trim whitespace and go lowercase
              BRACKET_PAYLOAD_TRIMMED=$(echo "$BRACKET_PAYLOAD" | tr -d '[:blank:]')
              BRACKET_PAYLOAD_TRIMMED_LOWERCASE=$(tr '[:upper:]' '[:lower:]' <<<"$BRACKET_PAYLOAD_TRIMMED" )
          
              # detect type      
              if [ "$BRACKET_PAYLOAD_TRIMMED_LOWERCASE" = "minor" ]; then
                VERSION_INCREMENT="minor"
              elif [ "$BRACKET_PAYLOAD_TRIMMED_LOWERCASE" = "major" ]; then
                VERSION_INCREMENT="major"
              elif [ "$BRACKET_PAYLOAD_TRIMMED_LOWERCASE" = "patch" ]; then
                VERSION_INCREMENT="patch"
              fi
            done <<< "$BRACKET_PAYLOADS"
          fi
          echo "Apply $VERSION_INCREMENT version increment"

          # Increment version (and reset lower digits to zero)
          # https://stackoverflow.com/questions/59435639/fix-shell-script-to-increment-semversion
          read MAJOR MINOR PATCH < <(echo $PREVIOUS_VERSION | ( IFS=".$IFS" ; read a b c && echo $a $b $c ))
          if [ "$VERSION_INCREMENT" = "minor" ]; then
            MINOR="$((MINOR + 1))"
            PATCH="0"
          elif [ "$VERSION_INCREMENT" = "major" ]; then
            MAJOR="$((MAJOR + 1))"
            MINOR="0"
            PATCH="0"
          elif [ "$VERSION_INCREMENT" = "patch" ]; then
            PATCH="$((PATCH + 1))"
          fi
          RELEASE_VERSION=$(echo "${MAJOR}.${MINOR}.${PATCH}")
          
          echo "Release version is $RELEASE_VERSION"

          mvn -B versions:set -DnewVersion=$RELEASE_VERSION

          echo "pom version updated to $RELEASE_VERSION"
          
          MAVEN_SKIP_TESTS_ARGUMENT=""
          if [ "${{ inputs.skip-tests }}" = "true" ]; then
            MAVEN_SKIP_TESTS_ARGUMENT="-DskipTests"
            echo "Note: Skipping tests"
          fi

          # prepare key          
          echo -n $SONATYPE_GPG_KEY | base64 --decode | gpg --batch --no-tty --import --yes
          echo "Releasing $RELEASE_VERSION .."
          
          mvn $MAVEN_SKIP_TESTS_ARGUMENT ${{ inputs.commands }}
          echo "Released $RELEASE_VERSION"

          RELEASE_TAG=${{ inputs.release-prefix }}${RELEASE_VERSION}
          git config user.name "Github Bot"
          git config user.email "github@entur.org"
          git tag -a $RELEASE_TAG HEAD -m "Release $RELEASE_VERSION" 
          git push --tags
          
          # create summary
          echo "$COMMIT_MESSAGE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo ":tada: Published $RELEASE_VERSION to Maven Central." >> $GITHUB_STEP_SUMMARY

          # workflow output
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
